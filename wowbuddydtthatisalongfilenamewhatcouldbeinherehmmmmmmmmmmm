// its just a minesweeper mod lmao

let container
let editor

document.addEventListener("keydown", e => { if (e.key == "`") Settings.unsaved.debug.enabled = !Settings.unsaved.debug.enabled })
const olddraw = SetupScreen.prototype.draw
const oldtick = SetupScreen.prototype.tick
const oldinit = SetupScreen.prototype.init
const extension = {
    draw() {
        if (!setupScreen.tileInfoOverlayShowing) {
            ctx.strokeText("Back to Title", 300, 932)
            ctx.fillText("Back to Title", 300, 932)
            ctx.strokeText("Code Editor", 300, 832)
            ctx.fillText("Code Editor", 300, 832)
        }
    },
    tick() {
        
    },
    init() {
        EventHandler.registerButton(200, 900, 200, 64, async ()=>{
            GameHandler.state = GameState.Title
            title = new Title()
        })
        EventHandler.registerButton(200, 800, 200, 64, ()=>{
            if (!container) {
                container = document.createElement("div")
                document.body.append(container)
                container.style = `
                position: fixed;
                left: 0;
                right: 0;
                top: 0;
                bottom: 0;
                resize: none;
                background: #000c;
                color: white;
                padding: 100px;
                outline: none;
                border: none;
                font-family: monospace;
                whitespace: pre;
                `
                container.innerText = "Loading..."
    
                require.config({ paths: { 'vs': 'https://unpkg.com/monaco-editor@latest/min/vs' }});
                window.MonacoEnvironment = { getWorkerUrl: () => proxy };
    
                let proxy = URL.createObjectURL(new Blob([`
                    self.MonacoEnvironment = {
                        baseUrl: 'https://unpkg.com/monaco-editor@latest/min/'
                    };
                    importScripts('https://unpkg.com/monaco-editor@latest/min/vs/base/worker/workerMain.js');
                `], { type: 'text/javascript' }));
    
                require(["vs/editor/editor.main"], function () {
                    container.style = `
                    position: fixed;
                    left: 0;
                    right: 0;
                    top: 0;
                    bottom: 0;
                    `
                    container.innerText = ""
                    editor = monaco.editor.create(container, {
                        value: localStorage.dtquickrunner || "",
                        language: 'javascript',
                        theme: 'vs-dark',
                        automaticLayout: true,
                    });
                    editor.addAction({
                        id: "run-code",
                        label: "Run Code",
                        keybindings: [
                            monaco.KeyCode.F5,
                        ],
                        precondition: null,
                        keybindingContext: null,
                        contextMenuGroupId: "navigation",
                        contextMenuOrder: 0,
                        run: async function (ed) {
                            container.remove()
                            try {
                                localStorage.dtquickrunner = editor.getValue()
                                eval(editor.getValue())
                                tileManager.tiles = []
                                tileManager.totalGenerationChance = 0
                                GameHandler.state = GameState.Loading
                                await LoadHandler.registerTiles()
                                GameHandler.state = GameState.GameSetup
                                setupScreen = new SetupScreen()
                            } catch(e) {
                                console.log(e)
                            }
                        },
                    })
                });
    
                container.addEventListener("click", e=>e.stopPropagation())
            } else document.body.append(container)
        })
    }
}
SetupScreen.prototype.tick = function(...args) {
    oldtick.apply(this, args)
    extension.tick.apply(this, args)
}
SetupScreen.prototype.draw = function(...args) {
    olddraw.apply(this, args)
    extension.draw.apply(this, args)
}
SetupScreen.prototype.init = function(...args) {
    oldinit.apply(this, args)
    extension.init.apply(this, args)
}

// this is definitely an ok thing to listen for
document.addEventListener(LoadEvent.LoadHandlerRegisterTiles, () => {
    console.log("hold on gotta uhh get this shit downloaded...")
    return new Promise(resolve => {
        const script = document.createElement("script")
        script.src = "https://unpkg.com/monaco-editor@latest/min/vs/loader.js"
        script.onload = ()=>{
            resolve()
            console.log("aight we good")
        }
        document.body.append(script)
    })
}, {once: true})
