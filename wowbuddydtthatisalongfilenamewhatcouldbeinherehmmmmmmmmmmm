// its just a minesweeper mod lmao

document.addEventListener("keydown", e => { if (e.key == "`") Settings.unsaved.debug.enabled = !Settings.unsaved.debug.enabled })
const olddraw = SetupScreen.prototype.draw
const oldtick = SetupScreen.prototype.tick
const oldinit = SetupScreen.prototype.init
const extension = {
    draw() {
        ctx.strokeText("Reload tiles", 300, 932)
        ctx.fillText("Reload tiles", 300, 932)
        ctx.strokeText("Eval String", 300, 832)
        ctx.fillText("Eval String", 300, 832)
    },
    tick() {
        
    },
    init() {
        EventHandler.registerButton(200, 900, 200, 64, ()=>{
            this.init = false
            tileManager.tiles = []
            tileManager.totalGenerationChance = 0
            LoadHandler.registerTiles()
        })
        EventHandler.registerButton(200, 800, 200, 64, ()=>{
            const container = document.createElement("textarea")
            document.body.append(container)
            container.style = `
            position: fixed;
            left: 0;
            right: 0;
            top: 0;
            bottom: 0;
            resize: none;
            background: #000c;
            color: white;
            padding: 100px;
            outline: none;
            border: none;
            `
            container.innerText = "Loading..."

            require.config({ paths: { 'vs': 'https://unpkg.com/monaco-editor@latest/min/vs' }});
            window.MonacoEnvironment = { getWorkerUrl: () => proxy };

            let proxy = URL.createObjectURL(new Blob([`
                self.MonacoEnvironment = {
                    baseUrl: 'https://unpkg.com/monaco-editor@latest/min/'
                };
                importScripts('https://unpkg.com/monaco-editor@latest/min/vs/base/worker/workerMain.js');
            `], { type: 'text/javascript' }));

            require(["vs/editor/editor.main"], function () {
                let editor = monaco.editor.create(document.getElementById('container'), {
                    value: "",
                    language: 'javascript',
                    theme: 'vs-dark',
                    automaticLayout: true,
                });
                editor.addAction({
                    id: "run-code",
                    label: "Run Code",
                    keybindings: [
                        monaco.KeyCode.F5,
                    ],
                    precondition: null,
                    keybindingContext: null,
                    contextMenuGroupId: "navigation",
                    contextMenuOrder: 0,
                    run: function (ed) {
                        try {
                            eval(editor.getValue())
                            this.init = false
                            tileManager.tiles = []
                            tileManager.totalGenerationChance = 0
                            LoadHandler.registerTiles()
                        } catch(e) {
                            console.log(e)
                        }
                        container.remove()
                    },
                })
            });

            container.addEventListener("click", e=>e.stopPropagation())
        })
    }
}
SetupScreen.prototype.tick = function(...args) {
    oldtick.apply(this, args)
    extension.tick.apply(this, args)
}
SetupScreen.prototype.draw = function(...args) {
    olddraw.apply(this, args)
    extension.draw.apply(this, args)
}
SetupScreen.prototype.init = function(...args) {
    oldinit.apply(this, args)
    extension.init.apply(this, args)
}

// this is definitely an ok thing to listen for
document.addEventListener(LoadEvent.LoadHandlerCheckVitalClasses, async () => {
    const res = await fetch("https://unpkg.com/monaco-editor@latest/min/vs/loader.js") // get lib
    const code = await res.text()
    eval(code) // this is fiiiine :)
}, {once: true})
