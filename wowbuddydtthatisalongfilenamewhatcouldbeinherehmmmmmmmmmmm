// its just a minesweeper mod lmao

document.addEventListener("keydown", e => { if (e.key == "`") Settings.unsaved.debug.enabled = !Settings.unsaved.debug.enabled })
const olddraw = SetupScreen.prototype.draw
const oldtick = SetupScreen.prototype.tick
const oldinit = SetupScreen.prototype.init
const extension = {
    draw() {
        ctx.strokeText("Reload tiles", 300, 932)
        ctx.fillText("Reload tiles", 300, 932)
        ctx.strokeText("Eval String", 300, 832)
        ctx.fillText("Eval String", 300, 832)
    },
    tick() {
        
    },
    init() {
        EventHandler.registerButton(200, 900, 200, 64, ()=>{
            this.init = false
            tileManager.tiles = []
            tileManager.totalGenerationChance = 0
            LoadHandler.registerTiles()
        })
        EventHandler.registerButton(200, 800, 200, 64, ()=>{
            let input = document.createElement("textarea")
            document.body.append(input)
            input.style = `
            position: fixed;
            left: 0;
            right: 0;
            top: 0;
            bottom: 0;
            resize: none;
            background: #000c;
            color: white;
            padding: 100px;
            outline: none;
            border: none;
            `
            input.focus()
            input.placeholder = "Press CTRL+ENTER when done"
            input.addEventListener("click", e=>e.stopPropagation())
            input.addEventListener("keydown", e=>{
                if (e.key == "Enter" && e.ctrlKey) {
                    try {
                        eval(prompt("EVAL"))
                        this.init = false
                        tileManager.tiles = []
                        tileManager.totalGenerationChance = 0
                        LoadHandler.registerTiles()
                    } catch(e) {
                        console.log(e)
                    }
                    input.remove()
                }
            })
        })
    }
}
SetupScreen.prototype.tick = function(...args) {
    oldtick.apply(this, args)
    extension.tick.apply(this, args)
}
SetupScreen.prototype.draw = function(...args) {
    olddraw.apply(this, args)
    extension.draw.apply(this, args)
}
SetupScreen.prototype.init = function(...args) {
    oldinit.apply(this, args)
    extension.init.apply(this, args)
}
